{
	"info": {
		"_postman_id": "12248fd0-02a6-4b8b-b059-781e1e6daf0e",
		"name": "API_Learning_01",
		"description": "Collection latihan dasar API Testing (GET, POST, PUT, DELETE) menggunakan ReqRes APIEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36385693"
	},
	"item": [
		{
			"name": "https://reqres.in/api/users/{{existingUserId}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"const schema = {\r",
							"  type: \"object\",\r",
							"  properties: {\r",
							"    data: {\r",
							"      type: \"object\",\r",
							"      properties: {\r",
							"        id: { type: \"number\" },\r",
							"        // email: { type: \"string\" },\r",
							"        first_name: { type: \"string\" }\r",
							"      },\r",
							"      required: [\"id\",\"first_name\"]\r",
							"    }\r",
							"  },\r",
							"  required: [\"data\"]\r",
							"};\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Name sesuai input\", () => {\r",
							"  const j = pm.response.json();\r",
							"  pm.expect(j.name).to.eql(pm.variables.get(\"inputName\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Schema valid\", () => {\r",
							"  pm.expect(tv4.validate(body, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// pm.test(\"Response has email field\", function () {\r",
							"//     pm.expect(jsonData.data).to.have.property(\"email\");\r",
							"// });\r",
							"\r",
							"// pm.test(\"User ID is 2\", function () {\r",
							"//     pm.expect(jsonData.data.id).to.eql(2);\r",
							"// });"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.expect(pm.variables.get(\"existingUserId\"), \"existingUserId must be set\").to.be.ok;\r",
							"if (!pm.collectionVariables.get(\"existingUserId\")) {\r",
							"  pm.collectionVariables.set(\"existingUserId\", \"2\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://reqres.in/api/users/{{existingUserId}}",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"{{existingUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://reqres.in/api/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  type: \"object\",\r",
							"  properties: {\r",
							"    name: { type: \"string\" },\r",
							"    job: { type: \"string\" },\r",
							"    id: { type: \"string\" },          // di ReqRes id = string\r",
							"    createdAt: { type: \"string\" }\r",
							"  },\r",
							"  required: [\"name\", \"job\", \"id\", \"createdAt\"]\r",
							"};\r",
							"\r",
							"const j = pm.response.json();\r",
							"// Di POST Create User (Tests)\r",
							"pm.collectionVariables.set(\"newUserId\", j.id);\r",
							"console.log(\"Set newUserId (collection):\", j.id);\r",
							"// pm.test(\"Name matches CSV\", () => pm.expect(j.name).to.eql(pm.iterationData.get(\"name\")));\r",
							"// pm.test(\"Job matches CSV\",  () => pm.expect(j.job).to.eql(pm.iterationData.get(\"job\")));\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Schema valid\", () => {\r",
							"  pm.expect(tv4.validate(body, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains name and job\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"job\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"name\": \"{{name}}\", \"job\": \"{{job}}\" }\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://reqres.in/api/users/{{newUserId}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"// const schema = {\r",
							"//   type: \"object\",\r",
							"//   properties: {\r",
							"//     data: {\r",
							"//       type: \"object\",\r",
							"//       properties: {\r",
							"//         id: { type: \"number\" },\r",
							"//         email: { type: \"string\" },\r",
							"//         first_name: { type: \"string\" }\r",
							"//       },\r",
							"//       required: [\"id\",\"email\",\"first_name\"]\r",
							"//     }\r",
							"//   },\r",
							"//   required: [\"data\"]\r",
							"// };\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Name sesuai input\", () => {\r",
							"  const j = pm.response.json();\r",
							"  pm.expect(j.name).to.eql(pm.variables.get(\"inputName\"));\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Schema valid\", () => {\r",
							"//   pm.expect(tv4.validate(body, schema)).to.be.true;\r",
							"// });\r",
							"\r",
							"// pm.test(\"Response has email field\", function () {\r",
							"//     pm.expect(jsonData.data).to.have.property(\"email\");\r",
							"// });\r",
							"\r",
							"// pm.test(\"User ID is 2\", function () {\r",
							"//     pm.expect(jsonData.data.id).to.eql(2);\r",
							"// });\r",
							"\r",
							"pm.test(\"Created user is not persisted (404 expected)\", () => {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/{{newUserId}}",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"{{newUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://reqres.in/api/users/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  type: \"object\",\r",
							"  properties: {\r",
							"    name: { type: \"string\" },\r",
							"    job: { type: \"string\" },\r",
							"    updatedAt: { type: \"string\" }\r",
							"  },\r",
							"  required: [\"name\", \"job\", \"updatedAt\"]\r",
							"};\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Schema valid\", () => {\r",
							"  pm.expect(tv4.validate(body, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains updatedAt\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
							"});\r",
							"\r",
							"// pm.test(\"Status 404 for user not found\", function () {\r",
							"//   pm.response.to.have.status(404);\r",
							"// });"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"name\": \"Tisa\", \"job\": \"Traveler\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://reqres.in/api/users/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"name\": \"{{name}}\", \"job\": \"{{job}}\" }"
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "existingUserId",
			"value": ""
		},
		{
			"key": "newUserId",
			"value": ""
		}
	]
}